buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:1.2.0.BUILD-SNAPSHOT")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/release" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Edgware.BUILD-SNAPSHOT"
}
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.projectlombok:lombok")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("org.springframework.cloud:spring-cloud-contract-wiremock")
    testCompile("org.springframework.cloud:spring-cloud-starter-contract-verifier")
}

contracts {
    packageWithBaseClasses = 'com.example'
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

task stubsJar(type: Jar) {
    classifier = "stubs"
    into("META-INF/${project.group}/${project.name}/${project.version}/mappings") {
        include('**/*.*')
        from("${project.rootDir}/target/snippets/stubs")
    }
    into("META-INF/${project.group}/${project.name}/${project.version}/contracts") {
        include('**/*.groovy')
        from("${project.rootDir}/target/snippets/contracts")
    }
}

stubsJar.dependsOn(test)

verifierStubsJar.enabled = false

artifacts {
    archives stubsJar
}

clean.doFirst {
    delete 'target/'
}
